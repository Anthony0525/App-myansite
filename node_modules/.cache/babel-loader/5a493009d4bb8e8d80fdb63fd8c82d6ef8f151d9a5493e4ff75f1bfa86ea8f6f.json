{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { supabase } from '@/lib/supabaseClient'; // Asegúrate de tener esta configuración\nimport \"@/assets/Perfil.css\";\n// Estado del acordeón\n\nexport default {\n  __name: 'PerfilView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const activeAccordion = ref(null);\n\n    // Datos del perfil traídos de Supabase\n    const profileData = ref({\n      username: '@SharkEmog',\n      avatar_url: 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png',\n      gustos: [],\n      logros: []\n    });\n\n    // Referencia al input de archivo para cambiar el avatar\n    const avatarInput = ref(null);\n\n    // Lógica para abrir/cerrar acordeones\n    const toggleAccordion = panelName => {\n      activeAccordion.value = activeAccordion.value === panelName ? null : panelName;\n    };\n\n    // Función para activar el input de archivo al hacer clic en el avatar\n    const changeAvatar = () => {\n      avatarInput.value.click();\n    };\n\n    // Maneja la selección del archivo y lo sube a Supabase Storage\n    const handleFileChange = async event => {\n      const file = event.target.files[0];\n      if (!file) return;\n      try {\n        const filePath = `avatars/${profileData.value.username}/${Date.now()}.${file.name.split('.').pop()}`;\n        const {\n          data,\n          error\n        } = await supabase.storage.from('avatars').upload(filePath, file);\n        if (error) throw error;\n        const publicUrl = `https://<your-project-ref>.supabase.co/storage/v1/object/public/avatars/${filePath}`;\n\n        // Actualiza la URL en la base de datos\n        const {\n          error: updateError\n        } = await supabase.from('profiles').update({\n          avatar_url: publicUrl\n        }).eq('username', profileData.value.username);\n        if (updateError) throw updateError;\n\n        // Actualiza la URL del perfil localmente\n        profileData.value.avatar_url = publicUrl;\n        alert('Imagen de perfil actualizada correctamente!');\n      } catch (error) {\n        console.error('Error al subir la imagen:', error.message);\n        alert('Error al subir la imagen. Inténtalo de nuevo.');\n      }\n    };\n\n    // Función para cargar todos los datos del perfil al montar el componente\n    const fetchProfileData = async () => {\n      try {\n        // Asegúrate de reemplazar el username con el del usuario autenticado\n        const {\n          data,\n          error\n        } = await supabase.from('profiles').select('username, avatar_url, gustos, logros') // Asegúrate de que los nombres de las columnas sean correctos\n        .eq('username', '@SharkEmog').single();\n        if (error) throw error;\n        if (data) {\n          profileData.value = {\n            username: data.username,\n            avatar_url: data.avatar_url,\n            gustos: data.gustos || [],\n            // Usa un array vacío si los datos son nulos\n            logros: data.logros || []\n          };\n        }\n      } catch (error) {\n        console.error('Error al cargar datos del perfil:', error.message);\n      }\n    };\n    onMounted(() => {\n      fetchProfileData();\n    });\n    const __returned__ = {\n      activeAccordion,\n      profileData,\n      avatarInput,\n      toggleAccordion,\n      changeAvatar,\n      handleFileChange,\n      fetchProfileData,\n      ref,\n      onMounted,\n      get supabase() {\n        return supabase;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","supabase","activeAccordion","profileData","username","avatar_url","gustos","logros","avatarInput","toggleAccordion","panelName","value","changeAvatar","click","handleFileChange","event","file","target","files","filePath","Date","now","name","split","pop","data","error","storage","from","upload","publicUrl","updateError","update","eq","alert","console","message","fetchProfileData","select","single"],"sources":["C:/Users/ellen/Downloads/App en Vue/Myansite/Myansite/src/views/PerfilView.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container\">\r\n    <div class=\"profile-card\">\r\n      <div class=\"top-section\">\r\n        <div class=\"label-box\">\r\n          <img src=\"@/assets/scan-icon.svg\" alt=\"Scan\" class=\"icon\" />\r\n          <span>Label</span>\r\n          <img src=\"@/assets/arrow-down.svg\" alt=\"Expand\" class=\"icon\" />\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"profile-content\">\r\n        <img src=\"@/assets/profile-background.jpg\" alt=\"Fondo del perfil\" class=\"content-image\" />\r\n        \r\n        <button\r\n          class=\"accordion-button\"\r\n          :class=\"{ 'is-active': activeAccordion === 'gustos' }\"\r\n          @click=\"toggleAccordion('gustos')\"\r\n        >\r\n          Gustos\r\n          <img src=\"@/assets/arrow-down.svg\" alt=\"Expandir\" class=\"arrow-icon\" />\r\n        </button>\r\n        <div class=\"accordion-panel\" :class=\"{ 'is-active': activeAccordion === 'gustos' }\">\r\n          <ul>\r\n            <li v-for=\"(gusto, index) in profileData.gustos\" :key=\"index\">{{ gusto }}</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <button\r\n          class=\"accordion-button\"\r\n          :class=\"{ 'is-active': activeAccordion === 'logros' }\"\r\n          @click=\"toggleAccordion('logros')\"\r\n        >\r\n          Logros\r\n          <img src=\"@/assets/arrow-down.svg\" alt=\"Expandir\" class=\"arrow-icon\" />\r\n        </button>\r\n        <div class=\"accordion-panel\" :class=\"{ 'is-active': activeAccordion === 'logros' }\">\r\n          <ul>\r\n            <li v-for=\"(logro, index) in profileData.logros\" :key=\"index\">{{ logro }}</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"user-info-section\">\r\n          <div class=\"user-avatar-container\" @click=\"changeAvatar\">\r\n            <img :src=\"profileData.avatar_url\" alt=\"Avatar del usuario\" class=\"user-avatar\" />\r\n            <input\r\n              type=\"file\"\r\n              ref=\"avatarInput\"\r\n              style=\"display: none\"\r\n              @change=\"handleFileChange\"\r\n              accept=\"image/*\"\r\n            />\r\n          </div>\r\n          <span class=\"username\">{{ profileData.username }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { supabase } from '@/lib/supabaseClient'; // Asegúrate de tener esta configuración\r\nimport \"@/assets/Perfil.css\"\r\n// Estado del acordeón\r\nconst activeAccordion = ref(null);\r\n\r\n// Datos del perfil traídos de Supabase\r\nconst profileData = ref({\r\n  username: '@SharkEmog',\r\n  avatar_url: 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png',\r\n  gustos: [],\r\n  logros: []\r\n});\r\n\r\n// Referencia al input de archivo para cambiar el avatar\r\nconst avatarInput = ref(null);\r\n\r\n// Lógica para abrir/cerrar acordeones\r\nconst toggleAccordion = (panelName) => {\r\n  activeAccordion.value = activeAccordion.value === panelName ? null : panelName;\r\n};\r\n\r\n// Función para activar el input de archivo al hacer clic en el avatar\r\nconst changeAvatar = () => {\r\n  avatarInput.value.click();\r\n};\r\n\r\n// Maneja la selección del archivo y lo sube a Supabase Storage\r\nconst handleFileChange = async (event) => {\r\n  const file = event.target.files[0];\r\n  if (!file) return;\r\n\r\n  try {\r\n    const filePath = `avatars/${profileData.value.username}/${Date.now()}.${file.name.split('.').pop()}`;\r\n    const { data, error } = await supabase.storage\r\n      .from('avatars')\r\n      .upload(filePath, file);\r\n\r\n    if (error) throw error;\r\n\r\n    const publicUrl = `https://<your-project-ref>.supabase.co/storage/v1/object/public/avatars/${filePath}`;\r\n    \r\n    // Actualiza la URL en la base de datos\r\n    const { error: updateError } = await supabase\r\n      .from('profiles')\r\n      .update({ avatar_url: publicUrl })\r\n      .eq('username', profileData.value.username);\r\n\r\n    if (updateError) throw updateError;\r\n    \r\n    // Actualiza la URL del perfil localmente\r\n    profileData.value.avatar_url = publicUrl;\r\n\r\n    alert('Imagen de perfil actualizada correctamente!');\r\n\r\n  } catch (error) {\r\n    console.error('Error al subir la imagen:', error.message);\r\n    alert('Error al subir la imagen. Inténtalo de nuevo.');\r\n  }\r\n};\r\n\r\n// Función para cargar todos los datos del perfil al montar el componente\r\nconst fetchProfileData = async () => {\r\n  try {\r\n    // Asegúrate de reemplazar el username con el del usuario autenticado\r\n    const { data, error } = await supabase\r\n      .from('profiles')\r\n      .select('username, avatar_url, gustos, logros') // Asegúrate de que los nombres de las columnas sean correctos\r\n      .eq('username', '@SharkEmog')\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    \r\n    if (data) {\r\n      profileData.value = {\r\n        username: data.username,\r\n        avatar_url: data.avatar_url,\r\n        gustos: data.gustos || [], // Usa un array vacío si los datos son nulos\r\n        logros: data.logros || []\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al cargar datos del perfil:', error.message);\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  fetchProfileData();\r\n});\r\n</script>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}