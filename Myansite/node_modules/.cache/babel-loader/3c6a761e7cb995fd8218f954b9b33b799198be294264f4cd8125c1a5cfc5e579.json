{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { a as printIonError } from './index4.js';\nconst tabsCss = \":host{left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:100%;height:100%;contain:layout size style;z-index:0}.tabs-inner{position:relative;-ms-flex:1;flex:1;contain:layout size style}\";\nconst Tabs = /*@__PURE__*/proxyCustomElement(class Tabs extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionTabsWillChange = createEvent(this, \"ionTabsWillChange\", 3);\n    this.ionTabsDidChange = createEvent(this, \"ionTabsDidChange\", 3);\n    this.transitioning = false;\n    /** @internal */\n    this.useRouter = false;\n    this.onTabClicked = ev => {\n      const {\n        href,\n        tab\n      } = ev.detail;\n      if (this.useRouter && href !== undefined) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n          router.push(href);\n        }\n      } else {\n        this.select(tab);\n      }\n    };\n  }\n  async componentWillLoad() {\n    if (!this.useRouter) {\n      /**\n       * JavaScript and StencilJS use `ion-router`, while\n       * the other frameworks use `ion-router-outlet`.\n       *\n       * If either component is present then tabs will not use\n       * a basic tab-based navigation. It will use the history\n       * stack or URL updates associated with the router.\n       */\n      this.useRouter = (!!this.el.querySelector('ion-router-outlet') || !!document.querySelector('ion-router')) && !this.el.closest('[no-router]');\n    }\n    if (!this.useRouter) {\n      const tabs = this.tabs;\n      if (tabs.length > 0) {\n        await this.select(tabs[0]);\n      }\n    }\n    this.ionNavWillLoad.emit();\n  }\n  componentWillRender() {\n    const tabBar = this.el.querySelector('ion-tab-bar');\n    if (tabBar) {\n      let tab = this.selectedTab ? this.selectedTab.tab : undefined;\n      // Fallback: if no selectedTab is set but we're using router mode,\n      // determine the active tab from the current URL. This works around\n      // timing issues in React Router integration where setRouteId may not\n      // be called in time for the initial render.\n      // TODO(FW-6724): Remove this with React Router upgrade\n      if (!tab && this.useRouter && typeof window !== 'undefined') {\n        const currentPath = window.location.pathname;\n        const tabButtons = this.el.querySelectorAll('ion-tab-button');\n        // Look for a tab button that matches the current path pattern\n        for (const tabButton of tabButtons) {\n          const tabId = tabButton.getAttribute('tab');\n          if (tabId && currentPath.includes(tabId)) {\n            tab = tabId;\n            break;\n          }\n        }\n      }\n      tabBar.selectedTab = tab;\n    }\n  }\n  /**\n   * Select a tab by the value of its `tab` property or an element reference. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.\n   *\n   * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.\n   */\n  async select(tab) {\n    const selectedTab = getTab(this.tabs, tab);\n    if (!this.shouldSwitch(selectedTab)) {\n      return false;\n    }\n    await this.setActive(selectedTab);\n    await this.notifyRouter();\n    this.tabSwitch();\n    return true;\n  }\n  /**\n   * Get a specific tab by the value of its `tab` property or an element reference. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.\n   *\n   * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.\n   */\n  async getTab(tab) {\n    return getTab(this.tabs, tab);\n  }\n  /**\n   * Get the currently selected tab. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.\n   */\n  getSelected() {\n    return Promise.resolve(this.selectedTab ? this.selectedTab.tab : undefined);\n  }\n  /** @internal */\n  async setRouteId(id) {\n    const selectedTab = getTab(this.tabs, id);\n    if (!this.shouldSwitch(selectedTab)) {\n      return {\n        changed: false,\n        element: this.selectedTab\n      };\n    }\n    await this.setActive(selectedTab);\n    return {\n      changed: true,\n      element: this.selectedTab,\n      markVisible: () => this.tabSwitch()\n    };\n  }\n  /** @internal */\n  async getRouteId() {\n    var _a;\n    const tabId = (_a = this.selectedTab) === null || _a === void 0 ? void 0 : _a.tab;\n    return tabId !== undefined ? {\n      id: tabId,\n      element: this.selectedTab\n    } : undefined;\n  }\n  setActive(selectedTab) {\n    if (this.transitioning) {\n      return Promise.reject('transitioning already happening');\n    }\n    this.transitioning = true;\n    this.leavingTab = this.selectedTab;\n    this.selectedTab = selectedTab;\n    this.ionTabsWillChange.emit({\n      tab: selectedTab.tab\n    });\n    selectedTab.active = true;\n    return Promise.resolve();\n  }\n  tabSwitch() {\n    const selectedTab = this.selectedTab;\n    const leavingTab = this.leavingTab;\n    this.leavingTab = undefined;\n    this.transitioning = false;\n    if (!selectedTab) {\n      return;\n    }\n    if (leavingTab !== selectedTab) {\n      if (leavingTab) {\n        leavingTab.active = false;\n      }\n      this.ionTabsDidChange.emit({\n        tab: selectedTab.tab\n      });\n    }\n  }\n  notifyRouter() {\n    if (this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        return router.navChanged('forward');\n      }\n    }\n    return Promise.resolve(false);\n  }\n  shouldSwitch(selectedTab) {\n    const leavingTab = this.selectedTab;\n    return selectedTab !== undefined && selectedTab !== leavingTab && !this.transitioning;\n  }\n  get tabs() {\n    return Array.from(this.el.querySelectorAll('ion-tab'));\n  }\n  render() {\n    return h(Host, {\n      key: '6dd1d17cc5a7aff4b910303006b4478080ca97af',\n      onIonTabButtonClick: this.onTabClicked\n    }, h(\"slot\", {\n      key: 'db54a692d1a825498a116f090eb305f7cceceb5a',\n      name: \"top\"\n    }), h(\"div\", {\n      key: 'e1b7d49ba7032e9071de2029695254e2a8303be9',\n      class: \"tabs-inner\"\n    }, h(\"slot\", {\n      key: '4c3b58d5292c8c834e7532c51de0861068943d79'\n    })), h(\"slot\", {\n      key: 'dd59c0b9b217dfbfb0fccdbc6896b593278549cc',\n      name: \"bottom\"\n    }));\n  }\n  get el() {\n    return this;\n  }\n  static get style() {\n    return tabsCss;\n  }\n}, [257, \"ion-tabs\", {\n  \"useRouter\": [1028, \"use-router\"],\n  \"selectedTab\": [32],\n  \"select\": [64],\n  \"getTab\": [64],\n  \"getSelected\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64]\n}]);\nconst getTab = (tabs, tab) => {\n  const tabEl = typeof tab === 'string' ? tabs.find(t => t.tab === tab) : tab;\n  if (!tabEl) {\n    printIonError(`[ion-tabs] - Tab with id: \"${tabEl}\" does not exist`);\n  }\n  return tabEl;\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-tabs\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-tabs\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Tabs);\n        }\n        break;\n    }\n  });\n}\nconst IonTabs = Tabs;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonTabs, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}