{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonList, IonCard, IonItem, IonLabel, IonAvatar, IonButtons, IonButton, IonModal, IonSegment, IonSegmentButton, IonFooter, IonInput } from \"@ionic/vue\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { useRouter } from \"vue-router\";\n\n// 🔹 Conexión Supabase\n\nexport default {\n  __name: 'ChatsView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const supabase = createClient(\"https://neffqwnqpcydidpkysfi.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" // ⚠️ pon tu key real\n    );\n    const router = useRouter();\n    const selectedSegment = ref(\"comunes\");\n    const chats = ref([]);\n    const selectedChat = ref(null);\n    const messages = ref([]);\n    const newMessage = ref(\"\");\n    const userId = ref(null);\n\n    // 🔹 Validar usuario logeado\n    onMounted(async () => {\n      const {\n        data,\n        error\n      } = await supabase.auth.getUser();\n      if (error || !data.user) {\n        router.push(\"/login\"); // Redirige a LoginView.vue\n        return;\n      }\n      userId.value = data.user.id;\n\n      // Cargar chats si hay usuario\n      const {\n        data: chatData\n      } = await supabase.from(\"chats\").select(\"*\");\n      chats.value = chatData || [];\n    });\n    const filteredChats = computed(() => {\n      return chats.value.filter(c => c.type === selectedSegment.value);\n    });\n\n    // 🔹 Abrir chat\n    const openChat = async chat => {\n      selectedChat.value = chat;\n      const {\n        data\n      } = await supabase.from(\"messages\").select(\"*\").eq(\"chat_id\", chat.id).order(\"created_at\", {\n        ascending: true\n      });\n      messages.value = data || [];\n\n      // Escuchar mensajes en tiempo real\n      supabase.channel(\"chat-room-\" + chat.id).on(\"postgres_changes\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\",\n        filter: `chat_id=eq.${chat.id}`\n      }, payload => {\n        messages.value.push(payload.new);\n      }).subscribe();\n    };\n\n    // 🔹 Cerrar modal\n    const closeChat = () => {\n      selectedChat.value = null;\n      messages.value = [];\n    };\n\n    // 🔹 Enviar mensaje\n    const sendMessage = async () => {\n      if (!newMessage.value.trim() || !selectedChat.value) return;\n      await supabase.from(\"messages\").insert([{\n        chat_id: selectedChat.value.id,\n        sender_id: userId.value,\n        content: newMessage.value\n      }]);\n      newMessage.value = \"\";\n    };\n    const __returned__ = {\n      supabase,\n      router,\n      selectedSegment,\n      chats,\n      selectedChat,\n      messages,\n      newMessage,\n      userId,\n      filteredChats,\n      openChat,\n      closeChat,\n      sendMessage,\n      get IonPage() {\n        return IonPage;\n      },\n      get IonHeader() {\n        return IonHeader;\n      },\n      get IonToolbar() {\n        return IonToolbar;\n      },\n      get IonTitle() {\n        return IonTitle;\n      },\n      get IonContent() {\n        return IonContent;\n      },\n      get IonList() {\n        return IonList;\n      },\n      get IonCard() {\n        return IonCard;\n      },\n      get IonItem() {\n        return IonItem;\n      },\n      get IonLabel() {\n        return IonLabel;\n      },\n      get IonAvatar() {\n        return IonAvatar;\n      },\n      get IonButtons() {\n        return IonButtons;\n      },\n      get IonButton() {\n        return IonButton;\n      },\n      get IonModal() {\n        return IonModal;\n      },\n      get IonSegment() {\n        return IonSegment;\n      },\n      get IonSegmentButton() {\n        return IonSegmentButton;\n      },\n      get IonFooter() {\n        return IonFooter;\n      },\n      get IonInput() {\n        return IonInput;\n      },\n      ref,\n      computed,\n      onMounted,\n      get createClient() {\n        return createClient;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["IonPage","IonHeader","IonToolbar","IonTitle","IonContent","IonList","IonCard","IonItem","IonLabel","IonAvatar","IonButtons","IonButton","IonModal","IonSegment","IonSegmentButton","IonFooter","IonInput","ref","computed","onMounted","createClient","useRouter","supabase","router","selectedSegment","chats","selectedChat","messages","newMessage","userId","data","error","auth","getUser","user","push","value","id","chatData","from","select","filteredChats","filter","c","type","openChat","chat","eq","order","ascending","channel","on","event","schema","table","payload","new","subscribe","closeChat","sendMessage","trim","insert","chat_id","sender_id","content"],"sources":["C:/Users/ellen/Downloads/App Myansite/Myansite Ionic/Myansite/Myansite/src/views/ChatsView.vue"],"sourcesContent":["<template>\r\n  <IonPage class=\"chat-page\">\r\n    <!-- Header con Segment -->\r\n    <IonHeader>\r\n      <IonToolbar>\r\n        <IonSegment v-model=\"selectedSegment\">\r\n          <IonSegmentButton value=\"comunes\">\r\n            <IonLabel>Comunes</IonLabel>\r\n          </IonSegmentButton>\r\n          <IonSegmentButton value=\"importantes\">\r\n            <IonLabel>Importantes</IonLabel>\r\n          </IonSegmentButton>\r\n        </IonSegment>\r\n      </IonToolbar>\r\n    </IonHeader>\r\n\r\n    <!-- Lista de chats -->\r\n    <IonContent class=\"ion-padding chat-content\">\r\n      <IonList>\r\n        <IonCard\r\n          v-for=\"chat in filteredChats\"\r\n          :key=\"chat.id\"\r\n          @click=\"openChat(chat)\"\r\n          class=\"chat-card\"\r\n        >\r\n          <IonItem lines=\"none\">\r\n            <!-- ✅ Migrado de slot=\"start\" -->\r\n            <template #start>\r\n              <IonAvatar>\r\n                <img :src=\"chat.user_avatar\" alt=\"avatar\" />\r\n              </IonAvatar>\r\n            </template>\r\n\r\n            <IonLabel>\r\n              <h2>{{ chat.username }}</h2>\r\n              <p>{{ chat.last_message }}</p>\r\n            </IonLabel>\r\n          </IonItem>\r\n        </IonCard>\r\n      </IonList>\r\n    </IonContent>\r\n\r\n    <!-- Modal de chat -->\r\n    <IonModal :is-open=\"selectedChat !== null\" @didDismiss=\"closeChat\">\r\n      <IonHeader>\r\n        <IonToolbar>\r\n          <!-- ✅ Migrado de slot=\"start\" -->\r\n          <template #start>\r\n            <IonButtons>\r\n              <IonButton @click=\"closeChat\">Cerrar</IonButton>\r\n            </IonButtons>\r\n          </template>\r\n\r\n          <IonTitle v-if=\"selectedChat\">{{ selectedChat.username }}</IonTitle>\r\n        </IonToolbar>\r\n      </IonHeader>\r\n\r\n      <IonContent class=\"chat-modal\">\r\n        <div class=\"chat-messages\">\r\n          <div\r\n            v-for=\"msg in messages\"\r\n            :key=\"msg.id\"\r\n            :class=\"['chat-bubble', msg.sender_id === userId ? 'own' : 'other']\"\r\n          >\r\n            <p>{{ msg.content }}</p>\r\n          </div>\r\n        </div>\r\n      </IonContent>\r\n\r\n      <IonFooter>\r\n        <IonToolbar>\r\n          <IonItem>\r\n            <IonInput\r\n              v-model=\"newMessage\"\r\n              placeholder=\"Escribe un mensaje...\"\r\n            />\r\n            <!-- ✅ Migrado de slot=\"end\" -->\r\n            <template #end>\r\n              <IonButton @click=\"sendMessage\">Enviar</IonButton>\r\n            </template>\r\n          </IonItem>\r\n        </IonToolbar>\r\n      </IonFooter>\r\n    </IonModal>\r\n  </IonPage>\r\n</template>\r\n\r\n<script setup>\r\nimport {\r\n  IonPage,\r\n  IonHeader,\r\n  IonToolbar,\r\n  IonTitle,\r\n  IonContent,\r\n  IonList,\r\n  IonCard,\r\n  IonItem,\r\n  IonLabel,\r\n  IonAvatar,\r\n  IonButtons,\r\n  IonButton,\r\n  IonModal,\r\n  IonSegment,\r\n  IonSegmentButton,\r\n  IonFooter,\r\n  IonInput,\r\n} from \"@ionic/vue\";\r\nimport { ref, computed, onMounted } from \"vue\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { useRouter } from \"vue-router\";\r\n\r\n// 🔹 Conexión Supabase\r\nconst supabase = createClient(\r\n  \"https://neffqwnqpcydidpkysfi.supabase.co\",\r\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" // ⚠️ pon tu key real\r\n);\r\n\r\nconst router = useRouter();\r\n\r\nconst selectedSegment = ref(\"comunes\");\r\nconst chats = ref([]);\r\nconst selectedChat = ref(null);\r\nconst messages = ref([]);\r\nconst newMessage = ref(\"\");\r\nconst userId = ref(null);\r\n\r\n// 🔹 Validar usuario logeado\r\nonMounted(async () => {\r\n  const { data, error } = await supabase.auth.getUser();\r\n  if (error || !data.user) {\r\n    router.push(\"/login\"); // Redirige a LoginView.vue\r\n    return;\r\n  }\r\n  userId.value = data.user.id;\r\n\r\n  // Cargar chats si hay usuario\r\n  const { data: chatData } = await supabase.from(\"chats\").select(\"*\");\r\n  chats.value = chatData || [];\r\n});\r\n\r\nconst filteredChats = computed(() => {\r\n  return chats.value.filter((c) => c.type === selectedSegment.value);\r\n});\r\n\r\n// 🔹 Abrir chat\r\nconst openChat = async (chat) => {\r\n  selectedChat.value = chat;\r\n  const { data } = await supabase\r\n    .from(\"messages\")\r\n    .select(\"*\")\r\n    .eq(\"chat_id\", chat.id)\r\n    .order(\"created_at\", { ascending: true });\r\n  messages.value = data || [];\r\n\r\n  // Escuchar mensajes en tiempo real\r\n  supabase\r\n    .channel(\"chat-room-\" + chat.id)\r\n    .on(\r\n      \"postgres_changes\",\r\n      {\r\n        event: \"INSERT\",\r\n        schema: \"public\",\r\n        table: \"messages\",\r\n        filter: `chat_id=eq.${chat.id}`,\r\n      },\r\n      (payload) => {\r\n        messages.value.push(payload.new);\r\n      }\r\n    )\r\n    .subscribe();\r\n};\r\n\r\n// 🔹 Cerrar modal\r\nconst closeChat = () => {\r\n  selectedChat.value = null;\r\n  messages.value = [];\r\n};\r\n\r\n// 🔹 Enviar mensaje\r\nconst sendMessage = async () => {\r\n  if (!newMessage.value.trim() || !selectedChat.value) return;\r\n\r\n  await supabase.from(\"messages\").insert([\r\n    {\r\n      chat_id: selectedChat.value.id,\r\n      sender_id: userId.value,\r\n      content: newMessage.value,\r\n    },\r\n  ]);\r\n\r\n  newMessage.value = \"\";\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chat-page {\r\n  background: url(\"@/assets/WhatsApp Image 2025-08-24 at 4.21.32 PM.jpeg\")\r\n    center/cover no-repeat;\r\n}\r\n\r\n.chat-card {\r\n  border-radius: 20px;\r\n  margin-bottom: 10px;\r\n  background: rgba(255, 255, 255, 0.85);\r\n  backdrop-filter: blur(6px);\r\n}\r\n\r\n.chat-content {\r\n  --background: transparent;\r\n}\r\n\r\n.chat-modal {\r\n  --background: #f5f5f5;\r\n}\r\n\r\n.chat-messages {\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-bubble {\r\n  max-width: 75%;\r\n  margin: 5px 0;\r\n  padding: 10px;\r\n  border-radius: 15px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.chat-bubble.own {\r\n  align-self: flex-end;\r\n  background: #5c6bc0;\r\n  color: white;\r\n}\r\n\r\n.chat-bubble.other {\r\n  align-self: flex-start;\r\n  background: #e0e0e0;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}