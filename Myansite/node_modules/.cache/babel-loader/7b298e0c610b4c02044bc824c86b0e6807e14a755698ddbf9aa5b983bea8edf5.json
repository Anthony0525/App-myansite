{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { createTextVNode as _createTextVNode, unref as _unref, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  class: \"chat-messages\"\n};\nimport { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonList, IonCard, IonItem, IonLabel, IonAvatar, IonButtons, IonButton, IonModal, IonSegment, IonSegmentButton, IonFooter, IonInput } from \"@ionic/vue\";\nimport { ref, computed, onMounted } from \"vue\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { useRouter } from \"vue-router\";\n\n// 🔹 Conexión Supabase\n\nexport default {\n  __name: 'ChatsView',\n  setup(__props) {\n    const supabase = createClient(\"https://neffqwnqpcydidpkysfi.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" // ⚠️ pon tu key real\n    );\n    const router = useRouter();\n    const selectedSegment = ref(\"comunes\");\n    const chats = ref([]);\n    const selectedChat = ref(null);\n    const messages = ref([]);\n    const newMessage = ref(\"\");\n    const userId = ref(null);\n\n    // 🔹 Validar usuario logeado\n    onMounted(async () => {\n      const {\n        data,\n        error\n      } = await supabase.auth.getUser();\n      if (error || !data.user) {\n        router.push(\"/login\"); // Redirige a LoginView.vue\n        return;\n      }\n      userId.value = data.user.id;\n\n      // Cargar chats si hay usuario\n      const {\n        data: chatData\n      } = await supabase.from(\"chats\").select(\"*\");\n      chats.value = chatData || [];\n    });\n    const filteredChats = computed(() => {\n      return chats.value.filter(c => c.type === selectedSegment.value);\n    });\n\n    // 🔹 Abrir chat\n    const openChat = async chat => {\n      selectedChat.value = chat;\n      const {\n        data\n      } = await supabase.from(\"messages\").select(\"*\").eq(\"chat_id\", chat.id).order(\"created_at\", {\n        ascending: true\n      });\n      messages.value = data || [];\n\n      // Escuchar mensajes en tiempo real\n      supabase.channel(\"chat-room-\" + chat.id).on(\"postgres_changes\", {\n        event: \"INSERT\",\n        schema: \"public\",\n        table: \"messages\",\n        filter: `chat_id=eq.${chat.id}`\n      }, payload => {\n        messages.value.push(payload.new);\n      }).subscribe();\n    };\n\n    // 🔹 Cerrar modal\n    const closeChat = () => {\n      selectedChat.value = null;\n      messages.value = [];\n    };\n\n    // 🔹 Enviar mensaje\n    const sendMessage = async () => {\n      if (!newMessage.value.trim() || !selectedChat.value) return;\n      await supabase.from(\"messages\").insert([{\n        chat_id: selectedChat.value.id,\n        sender_id: userId.value,\n        content: newMessage.value\n      }]);\n      newMessage.value = \"\";\n    };\n    return (_ctx, _cache) => {\n      return _openBlock(), _createBlock(_unref(IonPage), {\n        class: \"chat-page\"\n      }, {\n        default: _withCtx(() => [_createVNode(_unref(IonHeader), null, {\n          default: _withCtx(() => [_createVNode(_unref(IonToolbar), null, {\n            default: _withCtx(() => [_createVNode(_unref(IonSegment), {\n              modelValue: selectedSegment.value,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => selectedSegment.value = $event)\n            }, {\n              default: _withCtx(() => [_createVNode(_unref(IonSegmentButton), {\n                value: \"comunes\"\n              }, {\n                default: _withCtx(() => [_createVNode(_unref(IonLabel), null, {\n                  default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"Comunes\")])),\n                  _: 1\n                })]),\n                _: 1\n              }), _createVNode(_unref(IonSegmentButton), {\n                value: \"importantes\"\n              }, {\n                default: _withCtx(() => [_createVNode(_unref(IonLabel), null, {\n                  default: _withCtx(() => _cache[3] || (_cache[3] = [_createTextVNode(\"Importantes\")])),\n                  _: 1\n                })]),\n                _: 1\n              })]),\n              _: 1\n            }, 8, [\"modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        }), _createVNode(_unref(IonContent), {\n          class: \"ion-padding chat-content\"\n        }, {\n          default: _withCtx(() => [_createVNode(_unref(IonList), null, {\n            default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(filteredChats.value, chat => {\n              return _openBlock(), _createBlock(_unref(IonCard), {\n                key: chat.id,\n                onClick: $event => openChat(chat),\n                class: \"chat-card\"\n              }, {\n                default: _withCtx(() => [_createVNode(_unref(IonItem), {\n                  lines: \"none\"\n                }, {\n                  start: _withCtx(() => [_createVNode(_unref(IonAvatar), null, {\n                    default: _withCtx(() => [_createElementVNode(\"img\", {\n                      src: chat.user_avatar,\n                      alt: \"avatar\"\n                    }, null, 8, _hoisted_1)]),\n                    _: 2\n                  }, 1024)]),\n                  default: _withCtx(() => [_createVNode(_unref(IonLabel), null, {\n                    default: _withCtx(() => [_createElementVNode(\"h2\", null, _toDisplayString(chat.username), 1), _createElementVNode(\"p\", null, _toDisplayString(chat.last_message), 1)]),\n                    _: 2\n                  }, 1024)]),\n                  _: 2\n                }, 1024)]),\n                _: 2\n              }, 1032, [\"onClick\"]);\n            }), 128))]),\n            _: 1\n          })]),\n          _: 1\n        }), _createVNode(_unref(IonModal), {\n          \"is-open\": selectedChat.value !== null,\n          onDidDismiss: closeChat\n        }, {\n          default: _withCtx(() => [_createVNode(_unref(IonHeader), null, {\n            default: _withCtx(() => [_createVNode(_unref(IonToolbar), null, {\n              start: _withCtx(() => [_createVNode(_unref(IonButtons), null, {\n                default: _withCtx(() => [_createVNode(_unref(IonButton), {\n                  onClick: closeChat\n                }, {\n                  default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\"Cerrar\")])),\n                  _: 1\n                })]),\n                _: 1\n              })]),\n              default: _withCtx(() => [selectedChat.value ? (_openBlock(), _createBlock(_unref(IonTitle), {\n                key: 0\n              }, {\n                default: _withCtx(() => [_createTextVNode(_toDisplayString(selectedChat.value.username), 1)]),\n                _: 1\n              })) : _createCommentVNode(\"\", true)]),\n              _: 1\n            })]),\n            _: 1\n          }), _createVNode(_unref(IonContent), {\n            class: \"chat-modal\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(messages.value, msg => {\n              return _openBlock(), _createElementBlock(\"div\", {\n                key: msg.id,\n                class: _normalizeClass(['chat-bubble', msg.sender_id === userId.value ? 'own' : 'other'])\n              }, [_createElementVNode(\"p\", null, _toDisplayString(msg.content), 1)], 2);\n            }), 128))])]),\n            _: 1\n          }), _createVNode(_unref(IonFooter), null, {\n            default: _withCtx(() => [_createVNode(_unref(IonToolbar), null, {\n              default: _withCtx(() => [_createVNode(_unref(IonItem), null, {\n                end: _withCtx(() => [_createVNode(_unref(IonButton), {\n                  onClick: sendMessage\n                }, {\n                  default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\"Enviar\")])),\n                  _: 1\n                })]),\n                default: _withCtx(() => [_createVNode(_unref(IonInput), {\n                  modelValue: newMessage.value,\n                  \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => newMessage.value = $event),\n                  placeholder: \"Escribe un mensaje...\"\n                }, null, 8, [\"modelValue\"])]),\n                _: 1\n              })]),\n              _: 1\n            })]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"is-open\"])]),\n        _: 1\n      });\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}